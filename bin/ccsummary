#!/usr/bin/env python
#
# This program, ccsummary, gets a market summary of your values of
# cryptocurrencies.
#
#
# Copyright 2017-2018  Lucas Morales <lucas@lucasem.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# look for XXX for things you will want to change!

# requires aiohttp library

import sys
import asyncio, aiohttp, json
from datetime import datetime
loop = asyncio.get_event_loop()

# creates {cc: amt} of amount owned in each cryptocurrency.
async def own(jsonreq):
    # used for async command execution where we store output.
    class FutureProtocol(asyncio.SubprocessProtocol):
        def __init__(self, exit_future):
            self.exit_future = exit_future
            self.output = bytearray()
        def pipe_data_received(self, fd, data):
            self.output.extend(data)
        def process_exited(self):
            self.exit_future.set_result(True)

    # execute command asynchronously and return its stdout
    async def ex(cmd):
        exit_fut = asyncio.Future()
        create_fut = loop.subprocess_exec(lambda: FutureProtocol(exit_fut), cmd, stdin=None, stderr=None)
        transport, protocol = await create_fut
        await exit_fut
        transport.close() # make sure pipe is flushed
        return bytes(protocol.output).decode('ascii')

    # calls balance command (e.g. bbalance) and produces total. optional filter for addresses.
    async def balcmd(cmd, exclude=set()):
        output = await ex(cmd)
        lines = output.splitlines()
        pairs = (l.strip().split() for l in lines)
        return sum(float(amt) for amt, addr in pairs if addr not in exclude)

    # calls ebalance to get erc20 token balance.
    async def erc20(token, exclude=set()):
        exit_fut = asyncio.Future()
        create_fut = loop.subprocess_exec(lambda: FutureProtocol(exit_fut), "ebalance", token, stdin=None, stderr=None)
        transport, protocol = await create_fut
        await exit_fut
        transport.close() # make sure pipe is flushed
        output = bytes(protocol.output).decode('ascii')
        lines = output.splitlines()
        pairs = (l.strip().split() for l in lines)
        return sum(float(amt) for amt, addr in pairs if addr not in exclude)

    # gets balances for an ark address by asking a node
    async def ark(addr):
        resp = await jsonreq(f"http://node1.arknet.cloud:4001/api/accounts?address={addr}")
        return float(resp["account"]["unconfirmedBalance"])/10**8

    # gets balances for a stellar address by asking a node
    async def stellar(addr):
        resp = await jsonreq(f"https://horizon.stellar.org/accounts/{addr}", content_type="application/hal+json")
        return sum(float(x["balance"]) for x in resp["balances"])

    # XXX (the following two statements)
    b, l, z, e, a, s, o = await asyncio.gather(*map(asyncio.ensure_future, [
            balcmd("bbalance"),
            balcmd("lbalance"),
            balcmd("zbalance", exclude={"zcaNaoquXzHU11hfH3wcFtFfTs3r3paeZNipAqtNMbtVZ2rnNo5cj13uy3jyJdcTMvcg5XETrvAS6TctHeaCRN8reTQZ77p"}),
            balcmd("ebalance"),
            ark("AN4LfFfKNgdeiMUHJsyTrtc7YBC9CneGFU"),
            stellar("GCK7WP2LCJUSYNY3SSRVYIMD6OLTDYFCHFTFJOHT7AWMXQKXARHTWHUV")
            erc20("omg")
        ]))
    return {
        "btc": b,
        "ltc": l,
        "zec": z,
        "eth": e,
        "ark": a,
        "xlm": s,
        "omg": o,
        "bch": 0.221153,
    }

# creates {cc: value} of the USD market price of each given cryptocurrency.
async def prices(ccs, jsonreq):
    ccs = [cc.upper() for cc in ccs]
    summaries = await jsonreq("https://api.coinmarketcap.com/v1/ticker/?limit=100")
    summaries = [x for x in summaries if x["symbol"] in ccs]
    def summary(cc):
        for summary in summaries:
            if summary["symbol"] == cc:
                return summary
        raise ValueError(f"no summary for {cc}")
    return { cc.lower(): float(summary(cc)["price_usd"]) for cc in ccs }

async def main():
    async with aiohttp.ClientSession() as session:
        async def jsonreq(url, content_type="application/json"):
            async with session.get(url) as resp:
                return await resp.json(content_type=content_type)
        ccs = ["btc", "bch", "ltc", "zec", "eth", "ark", "req", "xlm", "xrb", "btg", "knc", "omg"] # XXX
        amts, prcs = await asyncio.gather(*map(asyncio.ensure_future, [own(jsonreq), prices(ccs, jsonreq)]))
        n = {}
        for cc in ccs:
            n[cc] = amts[cc]*prcs[cc]

        if len(sys.argv) > 1 and sys.argv[1] == "j":
            obj = { "time": datetime.now().isoformat(" ", "seconds"),
                    "data": {cc: {
                        "amount": amts[cc],
                        "price": prcs[cc],
                        "as_usd": n[cc],
                    } for cc in ccs},
                  }
            print(json.dumps(obj))
        elif len(sys.argv) > 1 and sys.argv[1] == "p":
            lines = [datetime.now().isoformat(" ", "seconds")]
            for cc in sorted(ccs, key=lambda cc: -n[cc]):
                left = f"{amts[cc]:.8f}".rjust(13)
                name = f"{cc.upper()}".ljust(4)
                price = f"${prcs[cc]:.2f}".rjust(9)
                lines.append(f"{left} {name} {price} -> ${n[cc]:.2f}")
            lines.append(f"  ${sum(n.values()):.2f}")
            print("\n".join(lines))
        else:
            print(json.dumps({cc: round(n[cc], 2) for cc in ccs}, indent=2))

loop.run_until_complete(main())
